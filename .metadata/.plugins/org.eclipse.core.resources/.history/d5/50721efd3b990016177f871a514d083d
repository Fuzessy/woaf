package woaf.controller.main;

import java.util.ArrayList;
import java.util.List;

import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import woaf.core.functions.AvaiableFunctionCommand;
import woaf.core.functions.AvaiableSimpleFunction;
import woaf.core.functions.Transition;

public class MenuEventHandler {
	
	private AvaiableSimpleFunction simpleFuction;
	private Stage mainStage;
	
	public MenuEventHandler(AvaiableSimpleFunction simpleFuction, Stage mainStage){
		this.simpleFuction = simpleFuction;
		this.mainStage = mainStage;
	}

	public void onAction(){
		try{
			ViewHandlerFactory factory = new ViewHandlerFactory();
			ViewHandler viewHandler = factory.getFormCreator(simpleFuction.getSubjectType());
			if(simpleFuction.getCommand() == AvaiableFunctionCommand.CREATE_NEW){
				// el kell kérni egy képernyőt, ami tudja kezelni
				// a cretae műveletet a
				// subject-re, és meg kell jeleníteni
				
				String fxml = viewHandler.getCreateFormForSubject();
				FXMLLoader loader = new FXMLLoader();
				loader.setLocation(getClass().getResource(fxml));
				Pane createPane = (Pane) loader.load();
				WoafController creatorController = loader.getController();
				
				loader = new FXMLLoader();
				loader.setLocation(getClass().getResource("/woaf/view/main/AbstractDoFunctionForm.fxml"));
				
				BorderPane doPane = (BorderPane) loader.load();
				doPane.setCenter(createPane);
				Scene doScene = new Scene(doPane);
				
				Stage doStage = new Stage();
				creatorController.setParentStage(doStage);
				AbstractDoFunctionFormController doFunctionFormController = loader.getController();
				doFunctionFormController.setOwnerStage(doStage);
				doFunctionFormController.setTransitionButtons(
						createTransitionButtons( 
								viewHandler.getTransitions(creatorController, simpleFuction), 
								doFunctionFormController ));
				
				
				doStage.setTitle("FORM CÍME");
				doStage.initModality(Modality.WINDOW_MODAL);
				doStage.initOwner(mainStage);
				
				doStage.setScene(doScene);
				doStage.showAndWait();
				
			}else if(simpleFuction.getCommand() == AvaiableFunctionCommand.CHOOSE_AND_DO){
				FXMLLoader loader = new FXMLLoader();
				loader.setLocation(getClass().getResource("/woaf/view/main/AbstractChooseForm.fxml"));
				BorderPane chooseForm = loader.load();
				AbstractChooseFormController chooseFormController = loader.getController();
				viewHandler.setDTOForChoose(chooseFormController,simpleFuction);			
				
				Scene chooseFormScene = new Scene(chooseForm);
				Stage chooseStage = new Stage();
				chooseStage.setTitle("Választás");
				chooseStage.initModality(Modality.WINDOW_MODAL);
				chooseStage.initOwner(mainStage);
				
				chooseStage.setScene(chooseFormScene);
				chooseFormController.setOwnerStage(chooseStage);
				chooseStage.showAndWait();
				
				if(!chooseFormController.isChooseCancelled()){
					String fxml = viewHandler.getDoFunctionForSubjectState(simpleFuction.getStateId());
					FormManager fm = new FormManager(fxml,"/woaf/view/main/AbstractDoFunctionForm.fxml", mainStage);
					fm.loadDoForm();
					Pane concreteDoPane = fm.getDoPane();
					fm.loadAbstractDoForm();
					
					
					
					
					
					Stage doStage = new Stage();
					doController.setParentStage(mainStage);
					AbstractDoFunctionFormController doFunctionFormController = loader.getController();
					doFunctionFormController.setOwnerStage(doStage);
					doFunctionFormController.setTransitionButtons(
							createTransitionButtons( 
									viewHandler.getTransitions(doController, simpleFuction), 
									doFunctionFormController ));
					
					doStage.setTitle("FORM CÍME");
					doStage.initModality(Modality.WINDOW_MODAL);
					doStage.initOwner(mainStage);
					
					doStage.setScene(doScene);
					doStage.showAndWait();
					/*
					 String fxml = viewHandler.getDoFunctionForSubjectState(simpleFuction.getStateId());
					loader = new FXMLLoader();
					loader.setLocation(getClass().getResource(fxml));
					Pane concreteDoPane = (Pane) loader.load();
					WoafController doController = loader.getController();
					
					loader = new FXMLLoader();
					loader.setLocation(getClass().getResource("/woaf/view/main/AbstractDoFunctionForm.fxml"));
					
					BorderPane doPane = (BorderPane) loader.load();
					doPane.setCenter(concreteDoPane);
					Scene doScene = new Scene(doPane);
					
					Stage doStage = new Stage();
					doController.setParentStage(mainStage);
					AbstractDoFunctionFormController doFunctionFormController = loader.getController();
					doFunctionFormController.setOwnerStage(doStage);
					doFunctionFormController.setTransitionButtons(
							createTransitionButtons( 
									viewHandler.getTransitions(doController, simpleFuction), 
									doFunctionFormController ));
					
					doStage.setTitle("FORM CÍME");
					doStage.initModality(Modality.WINDOW_MODAL);
					doStage.initOwner(mainStage);
					
					doStage.setScene(doScene);
					doStage.showAndWait();
					 */
				}
				
			}else{
				throw new IllegalArgumentException("Menu handler not found for: " + simpleFuction);
			}
		}catch(Exception ex){
			throw new RuntimeException(ex);
		}
	}
	
	private List<Button> createTransitionButtons(List<Transition> avaiableStartTransitions,
			AbstractDoFunctionFormController doFunctionFormController) {
		List<Button> buttons = new ArrayList<>();
		for(Transition tr : avaiableStartTransitions){
			Button button = new Button();
			button.setText(tr.getName());
			button.setOnAction( x -> {
				try{
					tr.getFunction().run();
					doFunctionFormController.close();
				}catch(Exception exc){
					// itt még finomítani kell
					throw exc;
				}
			});
			buttons.add(button);
		}
		return buttons;
	}
}
