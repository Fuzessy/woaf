package woaf.subject.customer;

import java.util.List;

import woaf.core.functions.AvaiableFunctionCommand;
import woaf.core.functions.AvaiableSimpleFunction;
import woaf.core.functions.AvaiableTransitionsHandler;
import woaf.core.functions.SubjectType;
import woaf.core.functions.Transition;

public class CustomerViewControllerWeaver {

	private IFCustomerController controller;
	private CustomerTHandler customerTHandler;
	private AvaiableTransitionsHandler avaiableTransitionsHandler;
	private AvaiableSimpleFunction function;
	
	public CustomerViewControllerWeaver(IFCustomerController controller, CustomerTHandler customerTHandler,
			AvaiableTransitionsHandler avaiableTransitionsHandler, AvaiableSimpleFunction function) {
		this.controller = controller;
		this.customerTHandler = customerTHandler;
		this.avaiableTransitionsHandler = avaiableTransitionsHandler;
		this.function = function;
	}

	public List<Transition> weaveTransitions() {
		List<Transition> transitions =
				function.getCommand() == AvaiableFunctionCommand.CREATE_NEW ?
						avaiableTransitionsHandler.getAvaiableStartTransitions(function.getSubjectType())
						: avaiableTransitionsHandler.getAvaiableTransitions(function.getSubjectType(), function.getStateId());
		for(Transition t : transitions){
			if(t.getSubjectType() != SubjectType.CUSTOMER){
				throw new java.lang.IllegalArgumentException("Only " + SubjectType.CUSTOMER + " supported! " + t.getSubjectType());
			}
			if(t.getTransitionId() == 7){ // Rögzítés
				t.setFunction( () -> customerTHandler.doRecordCustomer(controller.getCustomerForInsert()));
			}else if(t.getTransitionId() == 8){ // Adatmódosítás
				t.setFunction( () -> customerTHandler.doModifyCustomer(controller.getCustomerForModify()));
			}
		}
	}

}
